(define (insert-sort vec cmp)
  (define (insert-element ele index)
    (if (< index 0)
        (begin (vector-set! vec 0 ele)
               'done)
        (if (cmp ele (vector-ref vec index))
            (begin (vector-set! vec (+ index 1) (vector-ref vec index))
                   (insert-element ele (- index 1)))
            (begin (vector-set! vec (+ index 1) ele)
                   'done))))
  (define (iter-sort k)
    (if (= k (vector-length vec))
        'done
        (begin (insert-element (vector-ref vec k) (- k 1))
               (iter-sort (+ 1 k)))))
  (iter-sort 1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (merge-sort vec cmp inf)
  (define (iter-merge-help left right i j p r)
    (if (> p r)
        'done
        (let ((li (vector-ref left i))
              (rj (vector-ref right j)))
          (if (cmp li rj)
              (begin (vector-set! vec p li)
                     (iter-merge-help left right (+ i 1) j (+ p 1) r))
              (begin (vector-set! vec p rj)
                     (iter-merge-help left right i (+ j 1) (+ p 1) r))))))
  (define (merge p q r)
    (let ((left (vector-grow (subvector vec p (+ q 1)) (- (+ q 2) p)))
          (right (vector-grow (subvector vec (+ q 1) (+ r 1)) (+ 1 (- r q)))))
      (begin (vector-set! left (+ 1 (- q p)) inf)
             (vector-set! right (- r q) inf)
             (iter-merge-help left right 0 0 p r))))
  (define (merge-sort-help p r)
    (let ((q (floor (/ (+ p r) 2))))
      (if (>= p r)
          'done
          (begin (merge-sort-help p q)
                 (merge-sort-help (+ q 1) r)
                 (merge p q r)))))
  (merge-sort-help 0 (- (vector-length vec) 1)))
