(define (insert-sort vec cmp)
  (define (insert-element ele index)
    (if (< index 0)
        (begin (vector-set! vec 0 ele)
               'done)
        (if (cmp ele (vector-ref vec index))
            (begin (vector-set! vec (+ index 1) (vector-ref vec index))
                   (insert-element ele (- index 1)))
            (begin (vector-set! vec (+ index 1) ele)
                   'done))))
  (define (iter-sort k)
    (if (= k (vector-length vec))
        'done
        (begin (insert-element (vector-ref vec k) (- k 1))
               (iter-sort (+ 1 k)))))
  (iter-sort 1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (merge-sort vec cmp inf)
  (define (iter-merge-help left right i j p r)
    (if (> p r)
        'done
        (let ((li (vector-ref left i))
              (rj (vector-ref right j)))
          (if (cmp li rj)
              (begin (vector-set! vec p li)
                     (iter-merge-help left right (+ i 1) j (+ p 1) r))
              (begin (vector-set! vec p rj)
                     (iter-merge-help left right i (+ j 1) (+ p 1) r))))))
  (define (merge p q r)
    (let ((left (vector-grow (subvector vec p (+ q 1)) (- (+ q 2) p)))
          (right (vector-grow (subvector vec (+ q 1) (+ r 1)) (+ 1 (- r q)))))
      (begin (vector-set! left (+ 1 (- q p)) inf)
             (vector-set! right (- r q) inf)
             (iter-merge-help left right 0 0 p r))))
  (define (merge-sort-help p r)
    (let ((q (floor (/ (+ p r) 2))))
      (if (>= p r)
          'done
          (begin (merge-sort-help p q)
                 (merge-sort-help (+ q 1) r)
                 (merge p q r)))))
  (merge-sort-help 0 (- (vector-length vec) 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (make-heap c mint)
  (let ((data (vector))
        (heap-size 0)
        (cmp c))
    (define (get-parint-index i)
      (floor (/ (- i 1) 2)))
    (define (get-left-index i)
      (+ 1 (* 2 i)))
    (define (get-right-index i)
      (* 2 (+ i 1)))
    (define (get-element i)
      (if (>= i heap-size)
          mint
          (vector-ref data i)))
    (define (init vec)
      (begin (set! data vec)
             (set! heap-size (vector-length vec))
             (build-heap (floor (/ (- heap-size 1) 2)))))
    (define (exchange i j)
      (let ((tmp 0))
        (begin (set! tmp (vector-ref data i))
               (vector-set! data i (vector-ref data j))
               (vector-set! data j tmp)
               'done)))
    (define (heapify i)
      ;;this procedure suppose that i's child is heap already
      (let ((left (get-left-index i))
            (right (get-right-index i))
            (largest -1)
            (i-ele (get-element i)))
        (begin (if (cmp (get-element left) i-ele)
                   (set! largest i)
                   (set! largest left))
               (if (cmp (get-element largest) (get-element right))
                   (set! largest right))
               (if (= largest i)
                   'done
                   (begin (vector-set! data i (vector-ref data largest))
                          (vector-set! data largest i-ele)
                          (heapify largest))))))
    (define (build-heap start-index)
      (if (>= start-index 0)
          (begin (heapify start-index)
                 (build-heap (- start-index 1)))
          'done))
    (define (reduce-size)
      (set! heap-size (- heap-size 1)))
    (define (dispatch message)
      (cond ((eq? message 'init) init)
            ((eq? message 'data) data)
            ((eq? message 'heapify) heapify)
            ((eq? message 'reduce-size) reduce-size)
            ((eq? message 'ex) exchange)))
    dispatch))

(define (iter-heap-sort-help h start-index)
  (if (> start-index 0)
      (begin ((h 'ex) 0 start-index)
             ((h 'reduce-size))
             ((h 'heapify) 0)
             (iter-heap-sort-help h (- start-index 1)))
      'done))

(define (heap-sort vec cmp mint)
  (let ((heap (make-heap cmp mint)))
    (begin ((heap 'init) vec)
           (iter-heap-sort-help heap (- (vector-length vec) 1)))))
